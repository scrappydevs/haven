"""
Data models for handoff forms generated from alerts
"""
from datetime import datetime
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class AlertSeverity(str, Enum):
    """Alert severity levels matching database schema"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class AlertType(str, Enum):
    """Alert types matching database schema"""
    VITAL_SIGN = "vital_sign"
    CRS = "crs"
    MEDICATION = "medication"
    FALL_RISK = "fall_risk"
    EQUIPMENT = "equipment"
    PROTOCOL = "protocol"
    OTHER = "other"


class AlertStatus(str, Enum):
    """Alert status matching database schema"""
    ACTIVE = "active"
    ACKNOWLEDGED = "acknowledged"
    RESOLVED = "resolved"
    DISMISSED = "dismissed"


class AlertInfo(BaseModel):
    """Alert information extracted from alerts table"""
    id: str
    alert_type: AlertType
    severity: AlertSeverity
    patient_id: Optional[str]
    room_id: Optional[str]
    title: str
    description: Optional[str]
    status: AlertStatus
    triggered_by: Optional[str]
    triggered_at: Optional[datetime]
    acknowledged_by: Optional[str]
    acknowledged_at: Optional[datetime]
    resolved_by: Optional[str]
    resolved_at: Optional[datetime]
    metadata: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime
    updated_at: datetime


class PatientInfo(BaseModel):
    """Patient information for handoff form"""
    patient_id: str
    name: Optional[str]
    age: Optional[int]
    room_number: Optional[str]
    diagnosis: Optional[str]
    treatment_status: Optional[str]
    allergies: Optional[List[str]]
    current_medications: Optional[List[str]]


class HandoffFormContent(BaseModel):
    """Content of the handoff form"""
    # Patient Information
    patient_info: PatientInfo

    # Alert Summary
    alert_summary: str
    primary_concern: str
    severity_level: AlertSeverity

    # Clinical Context
    recent_vitals: Optional[Dict[str, Any]]
    relevant_history: Optional[str]
    current_treatments: Optional[List[str]]

    # Action Items
    recommended_actions: List[str]
    urgency_notes: Optional[str]
    protocols_to_follow: Optional[List[str]]

    # Alert Details
    related_alerts: List[AlertInfo]
    timeline: List[Dict[str, Any]]

    # Handoff Details
    generated_at: datetime
    generated_by: str  # "FETCH_AI_HANDOFF_AGENT"
    intended_recipient: str  # "Nurse", "Doctor", "Specialist"

    # Additional Context
    special_instructions: Optional[str]
    contact_information: Optional[Dict[str, str]]


class HandoffForm(BaseModel):
    """Complete handoff form model"""
    id: Optional[str]  # UUID generated by database
    form_number: Optional[str]  # e.g., "HO-2025-0001"
    patient_id: str
    alert_ids: List[str]  # All alert IDs included in this form

    # Form Content
    content: HandoffFormContent

    # Form Metadata
    pdf_url: Optional[str]  # Storage URL for generated PDF
    pdf_path: Optional[str]  # Local/storage path
    status: str = "generated"  # generated, sent, acknowledged, completed

    # Email Tracking
    emailed_to: Optional[List[str]]  # List of email addresses
    email_sent_at: Optional[datetime]
    email_delivery_status: Optional[str]

    # Timestamps
    created_at: Optional[datetime]
    updated_at: Optional[datetime]
    acknowledged_at: Optional[datetime]
    acknowledged_by: Optional[str]

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat() if v else None
        }


class FormGenerationRequest(BaseModel):
    """Request model for manual form generation"""
    alert_ids: Optional[List[str]]  # Specific alerts to include
    patient_id: Optional[str]  # Generate for all alerts of this patient
    severity_filter: Optional[List[AlertSeverity]]  # Filter by severity
    status_filter: Optional[List[AlertStatus]]  # Filter by status
    include_resolved: bool = False
    recipient_emails: Optional[List[str]]


class FormGenerationResponse(BaseModel):
    """Response model for form generation"""
    success: bool
    form_id: Optional[str]
    form_number: Optional[str]
    pdf_url: Optional[str]
    alerts_included: int
    message: str
    errors: Optional[List[str]]
