"""
PDF Report Generator for Haven
Generates patient stay reports when patients are removed from rooms
"""

from datetime import datetime
from typing import Dict, Any
from io import BytesIO
import json

# Try to import PDF libraries (install with: pip install reportlab)
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
    from reportlab.lib.enums import TA_CENTER, TA_LEFT
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("⚠️ reportlab not installed - PDF generation unavailable")
    print("   Install with: pip install reportlab")

from .supabase_client import supabase


async def generate_patient_discharge_report(patient_id: str, room_id: str) -> bytes:
    """
    Generate a PDF report for patient discharge/room transfer
    
    Args:
        patient_id: Patient identifier
        room_id: Room they're being removed from
        
    Returns:
        PDF bytes
    """
    if not REPORTLAB_AVAILABLE:
        raise Exception("PDF generation not available - reportlab not installed")
    
    if not supabase:
        raise Exception("Database not configured")
    
    # Fetch patient data
    patient_response = supabase.table("patients").select("*").eq("patient_id", patient_id).single().execute()
    if not patient_response.data:
        raise Exception(f"Patient {patient_id} not found")
    
    patient = patient_response.data
    
    # Fetch room assignment history
    assignment_response = supabase.table("patients_room").select("*").eq("patient_id", patient_id).eq("room_id", room_id).execute()
    assignment_data = assignment_response.data[0] if assignment_response.data else {}
    
    # Fetch room data
    room_response = supabase.table("rooms").select("*").eq("room_id", room_id).execute()
    room_data = room_response.data[0] if room_response.data else {}
    
    # Fetch alerts during stay
    alerts_response = supabase.table("alerts").select("*").eq("patient_id", patient_id).order("triggered_at", desc=True).limit(20).execute()
    alerts = alerts_response.data or []
    
    # Create PDF
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                           topMargin=0.75*inch, bottomMargin=0.75*inch,
                           leftMargin=0.75*inch, rightMargin=0.75*inch)
    
    # Build content
    story = []
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=12,
        alignment=TA_CENTER
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#4a5568'),
        spaceBefore=12,
        spaceAfter=6
    )
    
    # Header
    story.append(Paragraph("HAVEN HOSPITAL", title_style))
    story.append(Paragraph("Patient Stay Summary Report", styles['Heading2']))
    story.append(Spacer(1, 0.3*inch))
    
    # Report metadata
    metadata_data = [
        ['Report Generated:', datetime.now().strftime('%B %d, %Y at %I:%M %p')],
        ['Report Type:', 'Room Transfer / Discharge Summary'],
        ['Generated By:', 'Haven AI System']
    ]
    metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
    metadata_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#718096')),
        ('TEXTCOLOR', (1, 0), (1, -1), colors.HexColor('#1a1a1a')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    story.append(metadata_table)
    story.append(Spacer(1, 0.3*inch))
    
    # Patient Information
    story.append(Paragraph("PATIENT INFORMATION", heading_style))
    patient_data = [
        ['Patient Name:', patient.get('name', 'N/A')],
        ['Patient ID:', patient.get('patient_id', 'N/A')],
        ['Age:', f"{patient.get('age', 'N/A')} years old"],
        ['Gender:', patient.get('gender', 'N/A')],
        ['Condition:', patient.get('condition', 'N/A')],
        ['Enrollment Status:', patient.get('enrollment_status', 'N/A')],
        ['Enrollment Date:', patient.get('enrollment_date', 'N/A')],
    ]
    patient_table = Table(patient_data, colWidths=[2*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#4a5568')),
        ('TEXTCOLOR', (1, 0), (1, -1), colors.HexColor('#1a1a1a')),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f7fafc')),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.HexColor('#e2e8f0')),
    ]))
    story.append(patient_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Room Assignment Details
    story.append(Paragraph("ROOM ASSIGNMENT", heading_style))
    room_assignment_data = [
        ['Room:', room_data.get('room_name', 'N/A')],
        ['Room Type:', room_data.get('room_type', 'N/A')],
        ['Assigned At:', assignment_data.get('assigned_at', 'N/A')],
        ['Removed At:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
        ['Assigned By:', assignment_data.get('assigned_by', 'System')],
    ]
    room_table = Table(room_assignment_data, colWidths=[2*inch, 4*inch])
    room_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#4a5568')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f7fafc')),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.HexColor('#e2e8f0')),
    ]))
    story.append(room_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Clinical Events & Alerts
    if alerts:
        story.append(Paragraph("CLINICAL EVENTS & ALERTS DURING STAY", heading_style))
        
        alerts_data = [['Time', 'Severity', 'Type', 'Title']]
        for alert in alerts[:10]:  # Limit to 10 most recent
            alerts_data.append([
                datetime.fromisoformat(alert['triggered_at'].replace('Z', '+00:00')).strftime('%m/%d %H:%M'),
                alert.get('severity', '').upper(),
                alert.get('alert_type', 'N/A'),
                alert.get('title', 'N/A')
            ])
        
        alerts_table = Table(alerts_data, colWidths=[1.2*inch, 1*inch, 1.5*inch, 2.8*inch])
        alerts_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2d3748')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#e2e8f0')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f7fafc')]),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(alerts_table)
    else:
        story.append(Paragraph("No clinical alerts recorded during stay.", styles['Normal']))
    
    story.append(Spacer(1, 0.3*inch))
    
    # Baseline Vitals
    if patient.get('baseline_vitals'):
        story.append(Paragraph("BASELINE VITALS", heading_style))
        vitals = patient['baseline_vitals']
        vitals_data = [
            ['Heart Rate:', f"{vitals.get('heart_rate', 'N/A')} bpm"],
            ['Blood Pressure:', vitals.get('blood_pressure', 'N/A')],
            ['Temperature:', vitals.get('temperature', 'N/A')],
            ['Respiratory Rate:', f"{vitals.get('respiratory_rate', 'N/A')} /min"],
            ['O2 Saturation:', f"{vitals.get('oxygen_saturation', 'N/A')}%"],
        ]
        vitals_table = Table(vitals_data, colWidths=[2*inch, 4*inch])
        vitals_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(vitals_table)
    
    story.append(Spacer(1, 0.3*inch))
    
    # Footer
    story.append(Spacer(1, 0.5*inch))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#a0aec0'),
        alignment=TA_CENTER
    )
    story.append(Paragraph("This is a computer-generated report from Haven AI Hospital Management System", footer_style))
    story.append(Paragraph(f"Report ID: {patient_id}-{room_id}-{datetime.now().strftime('%Y%m%d%H%M%S')}", footer_style))
    
    # Build PDF
    doc.build(story)
    
    buffer.seek(0)
    return buffer.getvalue()


def generate_simple_text_report(patient_id: str, room_id: str) -> str:
    """
    Fallback: Generate a simple text report if PDF library not available
    """
    if not supabase:
        return "Database not configured"
    
    try:
        patient = supabase.table("patients").select("*").eq("patient_id", patient_id).single().execute().data
        room = supabase.table("rooms").select("*").eq("room_id", room_id).execute().data[0] if supabase.table("rooms").select("*").eq("room_id", room_id).execute().data else {}
        
        report = f"""
HAVEN HOSPITAL - PATIENT STAY SUMMARY
=====================================

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

PATIENT INFORMATION
-------------------
Name: {patient.get('name', 'N/A')}
ID: {patient.get('patient_id', 'N/A')}
Age: {patient.get('age', 'N/A')}
Condition: {patient.get('condition', 'N/A')}

ROOM ASSIGNMENT
---------------
Room: {room.get('room_name', 'N/A')}
Type: {room.get('room_type', 'N/A')}

STATUS
------
Removed from room at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

This is a computer-generated report.
"""
        return report
        
    except Exception as e:
        return f"Error generating report: {str(e)}"


async def generate_clinical_summary_report(summary_data: dict) -> bytes:
    """
    Generate AI-powered clinical summary PDF
    
    Args:
        summary_data: Dictionary from generate_patient_clinical_summary_tool
        
    Returns:
        PDF bytes
    """
    if not REPORTLAB_AVAILABLE:
        raise Exception("PDF generation not available - reportlab not installed")
    
    # Create PDF
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                           topMargin=0.75*inch, bottomMargin=0.75*inch,
                           leftMargin=0.75*inch, rightMargin=0.75*inch)
    
    story = []
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=12,
        alignment=TA_CENTER
    )
    
    section_style = ParagraphStyle(
        'SectionHeading',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#2d3748'),
        spaceBefore=16,
        spaceAfter=8,
        textColor=colors.HexColor('#4a5568')
    )
    
    # Header
    story.append(Paragraph("HAVEN HOSPITAL", title_style))
    story.append(Paragraph("AI-Powered Clinical Summary Report", styles['Heading2']))
    story.append(Spacer(1, 0.3*inch))
    
    # Patient Info
    patient_data = [
        ['Patient:', summary_data.get('patient_name', 'N/A')],
        ['Patient ID:', summary_data.get('patient_id', 'N/A')],
        ['Age / Gender:', f"{summary_data.get('age', 'N/A')} years / {summary_data.get('gender', 'N/A')}"],
        ['Diagnosis:', summary_data.get('condition', 'N/A')],
        ['Current Location:', summary_data.get('current_room', {}).get('room_name', 'Not assigned') if summary_data.get('current_room') else 'Not assigned'],
        ['Enrollment Status:', summary_data.get('enrollment_status', 'N/A')],
        ['Report Generated:', datetime.now().strftime('%B %d, %Y at %I:%M %p')],
    ]
    
    patient_table = Table(patient_data, colWidths=[2*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#4a5568')),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f7fafc')),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.HexColor('#e2e8f0')),
    ]))
    story.append(patient_table)
    story.append(Spacer(1, 0.3*inch))
    
    # AI Insights Section
    ai_insights = summary_data.get('ai_insights', {})
    
    # Key Concerns
    story.append(Paragraph("KEY CLINICAL CONCERNS", section_style))
    concerns_data = [[f"{i+1}. {concern}"] for i, concern in enumerate(ai_insights.get('key_concerns', []))]
    if concerns_data:
        concerns_table = Table(concerns_data, colWidths=[6.5*inch])
        concerns_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#fff5f5')),
            ('LEFTPADDING', (0, 0), (-1, -1), 12),
        ]))
        story.append(concerns_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Risk Factors
    story.append(Paragraph("RISK FACTORS TO MONITOR", section_style))
    risks_data = [[f"{i+1}. {risk}"] for i, risk in enumerate(ai_insights.get('risk_factors', []))]
    if risks_data:
        risks_table = Table(risks_data, colWidths=[6.5*inch])
        risks_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#fffaf0')),
            ('LEFTPADDING', (0, 0), (-1, -1), 12),
        ]))
        story.append(risks_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Recommendations
    story.append(Paragraph("CLINICAL RECOMMENDATIONS", section_style))
    recs_data = [[f"{i+1}. {rec}"] for i, rec in enumerate(ai_insights.get('recommendations', []))]
    if recs_data:
        recs_table = Table(recs_data, colWidths=[6.5*inch])
        recs_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f0fdf4')),
            ('LEFTPADDING', (0, 0), (-1, -1), 12),
        ]))
        story.append(recs_table)
    story.append(Spacer(1, 0.3*inch))
    
    # Active Alerts
    if summary_data.get('active_alerts'):
        story.append(Paragraph("ACTIVE ALERTS", section_style))
        
        alerts_data = [['Severity', 'Type', 'Title', 'Time']]
        for alert in summary_data['active_alerts']:
            alerts_data.append([
                alert.get('severity', '').upper(),
                alert.get('alert_type', 'N/A'),
                alert.get('title', 'N/A')[:40],
                datetime.fromisoformat(alert['triggered_at'].replace('Z', '+00:00')).strftime('%m/%d %H:%M') if alert.get('triggered_at') else 'N/A'
            ])
        
        alerts_table = Table(alerts_data, colWidths=[1*inch, 1.3*inch, 3*inch, 1.2*inch])
        alerts_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2d3748')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#e2e8f0')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f7fafc')]),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(alerts_table)
        story.append(Spacer(1, 0.2*inch))
    
    # Footer
    story.append(Spacer(1, 0.4*inch))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#a0aec0'),
        alignment=TA_CENTER
    )
    story.append(Paragraph("AI-Powered Clinical Summary — Haven Hospital Management System", footer_style))
    story.append(Paragraph(f"Generated by Haven AI | Report ID: {summary_data.get('patient_id')}-{datetime.now().strftime('%Y%m%d%H%M%S')}", footer_style))
    story.append(Paragraph("This report includes AI-generated insights and recommendations. Always verify with clinical judgment.", footer_style))
    
    # Build PDF
    doc.build(story)
    
    buffer.seek(0)
    return buffer.getvalue()

