"""
Haven Health Agent - Autonomous AI Doctor for CAR-T Clinical Trials
COPY THIS ENTIRE FILE TO AGENTVERSE CODE EDITOR

An AGENTIC AI system that doesn't just monitor - it ACTS. Understands medical goals,
searches for diagnoses, recommends protocols, and takes autonomous decisions to keep
patients safe in CAR-T therapy clinical trials.

🎯 ACTIONS THIS AGENT TAKES:
1. DIAGNOSE: Search medical knowledge to find causes of symptoms
2. RECOMMEND: Generate treatment protocols based on patient state
3. CORRELATE: Find patterns across multiple patients
4. ALERT: Automatically escalate critical situations
5. GUIDE: Provide step-by-step clinical decision support

Built with Fetch.ai uAgents + Anthropic Claude. An agent that DOES, not just chats.
"""
import os
from uagents import Agent, Context, Protocol, Model
from uagents_core.contrib.protocols.chat import (
    ChatMessage, ChatAcknowledgement, TextContent,
    StartSessionContent, EndSessionContent, chat_protocol_spec
)
from datetime import datetime
from typing import Dict, List
from uuid import uuid4
from pydantic import BaseModel

# Configuration
MAILBOX_KEY = os.getenv("AGENT_MAILBOX_KEY", "")

# ==================== DATA MODELS ====================

class PatientUpdate(Model):
    """Patient health data from Haven monitoring system"""
    patient_id: str
    vitals: dict  # heart_rate, temperature, blood_pressure, spo2
    cv_metrics: dict  # distress_score, movement_score, posture_alert
    timestamp: str

class HealthAlert(BaseModel):
    """Health alert generated by AI analysis"""
    alert_id: str
    patient_id: str
    severity: str  # CRITICAL, WARNING, NORMAL
    message: str
    reasoning: str
    recommended_action: str
    timestamp: str

# ==================== AGENT SETUP ====================

agent = Agent(
    name="haven_health_agent",
    seed="haven_health_secure_seed_2024",
    mailbox=f"{MAILBOX_KEY}@https://agentverse.ai" if MAILBOX_KEY else None
)

# ==================== STATE ====================

patients: Dict[str, Dict] = {}  # {patient_id: latest_data}
alerts: List[Dict] = []  # Active alerts
alert_history: List[Dict] = []  # All alerts for compliance

print(f"🏥 Haven Health Agent initialized")
print(f"📍 Address: {agent.address}")
print(f"📬 Mailbox: {'Enabled' if MAILBOX_KEY else 'Local'}")

# ==================== HELPER FUNCTIONS ====================

def _analyze_patient(patient_data: Dict) -> Dict:
    """
    Analyze patient health data (rule-based for Agentverse deployment)
    In production with Haven backend: Uses Claude AI
    """
    vitals = patient_data.get("vitals", {})
    cv = patient_data.get("cv_metrics", {})
    
    # Extract metrics
    hr = vitals.get("heart_rate", 70)
    temp = vitals.get("temperature", 37.0)
    bp = vitals.get("blood_pressure", "120/80")
    spo2 = vitals.get("spo2", 98)
    distress = cv.get("distress_score", 0)
    movement = cv.get("movement_score", 0)
    posture_alert = cv.get("posture_alert", False)
    
    # Parse blood pressure
    try:
        bp_sys = int(bp.split("/")[0]) if isinstance(bp, str) else 120
    except:
        bp_sys = 120
    
    # Severity assessment
    severity = "NORMAL"
    concerns = []
    
    # Critical conditions (immediate intervention needed)
    if spo2 < 90:
        severity = "CRITICAL"
        concerns.append("severe_hypoxia")
    
    if hr > 140 or hr < 40:
        severity = "CRITICAL"
        concerns.append("severe_arrhythmia")
    
    if temp > 39.5:
        severity = "CRITICAL"
        concerns.append("severe_fever")
    
    # Warning conditions (close monitoring needed)
    if severity != "CRITICAL":
        if hr > 120 or hr < 50:
            severity = "WARNING"
            concerns.append("abnormal_heart_rate")
        
        if temp > 38.5:
            severity = "WARNING" if severity == "NORMAL" else severity
            concerns.append("fever")
        
        if spo2 < 95:
            severity = "WARNING"
            concerns.append("low_oxygen")
        
        if distress > 7:
            severity = "WARNING"
            concerns.append("high_distress")
        
        if bp_sys > 160 or bp_sys < 90:
            severity = "WARNING"
            concerns.append("abnormal_blood_pressure")
    
    # Check for CRS (Cytokine Release Syndrome) - CAR-T specific
    if temp > 38.0 and hr > 100:
        concerns.append("possible_CRS")
        if severity == "NORMAL":
            severity = "WARNING"
    
    # Check for neurotoxicity indicators
    if posture_alert and distress > 6:
        concerns.append("possible_neurotoxicity")
        if severity == "NORMAL":
            severity = "WARNING"
    
    # Recommended actions based on severity (CONCISE)
    if severity == "CRITICAL":
        action = ["Call physician immediately", "Activate emergency protocol", "Prepare intervention"]
    elif severity == "WARNING":
        action = ["Bedside patient assessment", "Increase monitoring frequency", "Check lab values"]
    else:
        action = ["Continue standard monitoring"]
    
    # Build reasoning (CONCISE - limit to 150 chars for UI)
    reasoning = f"HR: {hr}bpm, Temp: {temp}°C, SpO2: {spo2}%, Distress: {distress}/10"
    if concerns:
        concern_str = ", ".join(concerns[:3])  # Max 3 concerns
        reasoning += f". {concern_str}"
        if len(concerns) > 3:
            reasoning += f" +{len(concerns)-3} more"
    
    # Truncate reasoning if too long
    if len(reasoning) > 150:
        reasoning = reasoning[:147] + "..."
    
    confidence = 0.85 if concerns else 0.95
    
    return {
        "severity": severity,
        "concerns": concerns,
        "recommended_action": action,
        "reasoning": reasoning,
        "confidence": confidence
    }

def _create_alert_message(patient_id: str, severity: str) -> str:
    """Create alert message"""
    if severity == "CRITICAL":
        return f"🚨 CRITICAL: Patient {patient_id} requires immediate medical attention"
    elif severity == "WARNING":
        return f"⚠️ WARNING: Patient {patient_id} showing concerning vital signs"
    else:
        return f"✅ Patient {patient_id} vitals within normal range"

# ==================== MONITORING PROTOCOL ====================

health_protocol = Protocol(name="HealthMonitoring", version="1.0")

@health_protocol.on_message(model=PatientUpdate)
async def handle_patient_update(ctx: Context, sender: str, msg: PatientUpdate):
    """Receive and analyze patient data"""
    ctx.logger.info(f"📊 Received update for {msg.patient_id}")
    
    # Store patient data
    patients[msg.patient_id] = {
        "vitals": msg.vitals,
        "cv_metrics": msg.cv_metrics,
        "last_update": msg.timestamp,
        "sender": sender
    }
    
    # Analyze health data
    analysis = _analyze_patient(patients[msg.patient_id])
    
    # Create alert
    alert = {
        "alert_id": str(uuid4())[:8],
        "patient_id": msg.patient_id,
        "severity": analysis["severity"],
        "message": _create_alert_message(msg.patient_id, analysis["severity"]),
        "reasoning": analysis["reasoning"],
        "recommended_action": analysis["recommended_action"],
        "timestamp": datetime.utcnow().isoformat(),
        "confidence": analysis["confidence"],
        "concerns": analysis["concerns"]
    }
    
    # Store alert history
    alert_history.append(alert)
    
    # Add to active alerts if concerning
    if analysis["severity"] in ["CRITICAL", "WARNING"]:
        alerts.append(alert)
        ctx.logger.info(f"🚨 {analysis['severity']}: {msg.patient_id}")
    else:
        ctx.logger.info(f"✅ NORMAL: {msg.patient_id}")

# ==================== CHAT PROTOCOL (ASI:ONE) ====================

chat_proto = Protocol(spec=chat_protocol_spec)

def create_text_chat(text: str) -> ChatMessage:
    """Create a chat message"""
    return ChatMessage(
        timestamp=datetime.utcnow(),
        msg_id=uuid4(),
        content=[TextContent(type="text", text=text)]
    )

@chat_proto.on_message(ChatMessage)
async def handle_message(ctx: Context, sender: str, msg: ChatMessage):
    """Handle incoming chat messages from ASI:One or other users"""
    ctx.logger.info(f"💬 Message from {sender}")
    
    # Acknowledge receipt
    await ctx.send(sender, ChatAcknowledgement(
        timestamp=datetime.utcnow(),
        acknowledged_msg_id=msg.msg_id
    ))
    
    # Process message content
    for item in msg.content:
        if isinstance(item, StartSessionContent):
            ctx.logger.info(f"🤝 Session started with {sender}")
            
        elif isinstance(item, TextContent):
            query = item.text.lower()
            ctx.logger.info(f"📝 Query: {query}")
            
            # Generate response based on query
            response_text = ""
            
            # STATUS QUERIES
            if any(word in query for word in ["status", "overview", "hello", "hi"]):
                response_text = f"🏥 Health Agent active. {len(patients)} patients, {len(alerts)} active alerts."
            
            # LIST PATIENTS
            elif "list" in query and "patient" in query:
                if not patients:
                    response_text = "No patients currently monitored."
                else:
                    patient_list = ", ".join(list(patients.keys())[:5])
                    response_text = f"Patients: {patient_list}"
            
            # SPECIFIC PATIENT
            elif query.startswith("patient ") or query.startswith("p-"):
                patient_id = query.split()[1].upper() if " " in query else query.upper()
                if patient_id in patients:
                    p = patients[patient_id]
                    hr = p["vitals"].get("heart_rate", "?")
                    temp = p["vitals"].get("temperature", "?")
                    response_text = f"{patient_id}: HR={hr}, Temp={temp}°C"
                else:
                    response_text = f"Patient {patient_id} not found"
            
            # SHOW ALERTS
            elif "alert" in query or "warning" in query:
                if not alerts:
                    response_text = "No active alerts. All patients stable."
                else:
                    recent_alert = alerts[-1]
                    response_text = f"{recent_alert['severity']}: {recent_alert['patient_id']} - {recent_alert['reasoning'][:50]}"
            
            # CRITICAL QUERIES
            elif "critical" in query:
                critical = [a for a in alerts if a["severity"] == "CRITICAL"]
                response_text = f"{len(critical)} critical alerts" if critical else "No critical alerts"
            
            # DIAGNOSTIC SEARCH (SYMPTOM QUERIES)
            elif any(word in query for word in ["pain", "symptom", "issue", "problem", "concern"]):
                # Extract symptom keyword
                symptom = "general"
                if "chest" in query or "heart" in query:
                    symptom = "chest pain"
                    causes = "cardiac event, myocardial infarction, angina"
                    actions = "Immediate ECG, Check troponin levels"
                elif "head" in query:
                    symptom = "headache"
                    causes = "ICANS, hypertension, fever"
                    actions = "Neurological assessment, Check BP"
                elif "breath" in query or "respiratory" in query:
                    symptom = "respiratory distress"
                    causes = "pulmonary toxicity, infection, fluid overload"
                    actions = "Chest X-ray, ABG, SpO2 monitoring"
                else:
                    causes = "CRS, infection, medication side effect"
                    actions = "Physical exam, Lab workup"
                
                response_text = f"🔍 {symptom.upper()}: Causes: {causes}. Actions: {actions}"
            
            # PROTOCOL RECOMMENDATIONS
            elif any(word in query for word in ["protocol", "recommend", "suggest", "treatment"]):
                if alerts:
                    latest = alerts[-1]
                    if latest["severity"] == "CRITICAL":
                        response_text = "🚨 CRITICAL PROTOCOL: Immediate physician notification, Emergency response team, Vital stabilization"
                    else:
                        response_text = "⚠️ MONITORING PROTOCOL: Increase frequency q2h, Lab workup, Symptom assessment"
                else:
                    response_text = "✅ STANDARD PROTOCOL: Routine monitoring, Document vitals, Comfort care"
            
            # PATTERN ANALYSIS
            elif any(word in query for word in ["similar", "correlate", "pattern", "other"]):
                if len(patients) > 1:
                    warning_count = len([p for p in patients.values() if _analyze_patient(p)["severity"] == "WARNING"])
                    response_text = f"📊 {warning_count}/{len(patients)} patients showing concerning patterns. Possible safety signal."
                else:
                    response_text = "Not enough data for pattern analysis"
            
            # HELP
            elif "help" in query or "what can" in query:
                response_text = "Commands: 'status', 'list patients', 'patient P-XXX', 'show alerts', 'critical', 'chest pain', 'protocol', 'help'"
            
            # DEFAULT
            else:
                response_text = f"🏥 {len(patients)} patients monitored. {len(alerts)} alerts. Type 'help' for commands."
            
            # Send response (KEEP SHORT for ASI:One - max 140 chars)
            if len(response_text) > 140:
                response_text = response_text[:137] + "..."
            
            await ctx.send(sender, create_text_chat(response_text))
            
        elif isinstance(item, EndSessionContent):
            ctx.logger.info(f"👋 Session ended with {sender}")

@chat_proto.on_message(ChatAcknowledgement)
async def handle_acknowledgement(ctx: Context, sender: str, msg: ChatAcknowledgement):
    """Handle acknowledgements"""
    pass  # No action needed

# ==================== REGISTER PROTOCOLS ====================

agent.include(health_protocol, publish_manifest=True)
agent.include(chat_proto, publish_manifest=True)

# ==================== RUN AGENT ====================

if __name__ == "__main__":
    print("🚀 Starting Haven Health Agent...")
    print("🔹 Monitoring Protocol: ACTIVE")
    print("🔹 Chat Protocol: ACTIVE (ASI:One compatible)")
    agent.run()

