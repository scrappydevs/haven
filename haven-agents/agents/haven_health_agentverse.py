"""
Haven Health Agent - Autonomous AI Doctor for CAR-T Clinical Trials

An AGENTIC AI system that doesn't just monitor - it ACTS. Understands medical goals,
searches for diagnoses, recommends protocols, and takes autonomous decisions to keep
patients safe in CAR-T therapy clinical trials.

🎯 ACTIONS THIS AGENT TAKES:
1. DIAGNOSE: Search medical knowledge to find causes of symptoms
2. RECOMMEND: Generate treatment protocols based on patient state
3. CORRELATE: Find patterns across multiple patients
4. ALERT: Automatically escalate critical situations
5. GUIDE: Provide step-by-step clinical decision support

KEY FEATURES:
- Autonomous symptom analysis and differential diagnosis
- Protocol search and treatment recommendations
- Cross-patient pattern detection for safety signals
- Real-time vital monitoring with AI assessment
- Natural language medical queries via ASI:One
- Compliance logging for FDA/EMA audits

USE CASES:
- CAR-T therapy toxicity management (CRS, ICANS)
- Clinical trial safety surveillance
- Hospital ICU decision support
- Early warning system for adverse events
- Medical education and protocol guidance

INTEGRATION:
Part of Haven AI platform. Receives data from CV systems and sensors,
takes autonomous actions, provides decision support to medical staff.

Built with Fetch.ai uAgents + Anthropic Claude. An agent that DOES, not just chats.
"""
import os
from uagents import Agent, Context, Protocol, Model
from uagents_core.contrib.protocols.chat import (
    ChatMessage, ChatAcknowledgement, TextContent,
    StartSessionContent, EndSessionContent, chat_protocol_spec
)
from datetime import datetime
from typing import Dict, List
from uuid import uuid4
from pydantic import BaseModel

# Configuration
MAILBOX_KEY = os.getenv("AGENT_MAILBOX_KEY", "")

# ==================== DATA MODELS ====================

class PatientUpdate(Model):
    """Patient health data from Haven monitoring system"""
    patient_id: str
    vitals: dict  # heart_rate, temperature, blood_pressure, spo2
    cv_metrics: dict  # distress_score, movement_score, posture_alert
    timestamp: str

class HealthAlert(BaseModel):
    """Health alert generated by AI analysis"""
    alert_id: str
    patient_id: str
    severity: str  # CRITICAL, WARNING, NORMAL
    message: str
    reasoning: str
    recommended_action: str
    timestamp: str

# ==================== AGENT SETUP ====================

agent = Agent(
    name="haven_health_agent",
    seed="haven_health_secure_seed_2024",
    mailbox=f"{MAILBOX_KEY}@https://agentverse.ai" if MAILBOX_KEY else None
)

# ==================== STATE ====================

patients: Dict[str, Dict] = {}  # {patient_id: latest_data}
alerts: List[Dict] = []  # Active alerts
alert_history: List[Dict] = []  # All alerts for compliance

print(f"🏥 Haven Health Agent initialized")
print(f"📍 Address: {agent.address}")
print(f"📬 Mailbox: {'Enabled' if MAILBOX_KEY else 'Local'}")

# ==================== HELPER FUNCTIONS ====================

def _analyze_patient(patient_data: Dict) -> Dict:
    """
    Analyze patient health data (rule-based for Agentverse deployment)
    In production with Haven backend: Uses Claude AI
    """
    vitals = patient_data.get("vitals", {})
    cv = patient_data.get("cv_metrics", {})
    
    # Extract metrics
    hr = vitals.get("heart_rate", 70)
    temp = vitals.get("temperature", 37.0)
    bp = vitals.get("blood_pressure", "120/80")
    spo2 = vitals.get("spo2", 98)
    distress = cv.get("distress_score", 0)
    movement = cv.get("movement_score", 0)
    posture_alert = cv.get("posture_alert", False)
    
    # Parse blood pressure
    try:
        bp_sys = int(bp.split("/")[0]) if isinstance(bp, str) else 120
    except:
        bp_sys = 120
    
    # Severity assessment
    severity = "NORMAL"
    concerns = []
    
    # Critical conditions (immediate intervention needed)
    if spo2 < 90:
        severity = "CRITICAL"
        concerns.append("severe_hypoxia")
    
    if hr > 140 or hr < 40:
        severity = "CRITICAL"
        concerns.append("severe_arrhythmia")
    
    if temp > 39.5:
        severity = "CRITICAL"
        concerns.append("severe_fever")
    
    # Warning conditions (close monitoring needed)
    if severity != "CRITICAL":
        if hr > 120 or hr < 50:
            severity = "WARNING"
            concerns.append("abnormal_heart_rate")
        
        if temp > 38.5:
            severity = "WARNING" if severity == "NORMAL" else severity
            concerns.append("fever")
        
        if spo2 < 95:
            severity = "WARNING"
            concerns.append("low_oxygen")
        
        if distress > 7:
            severity = "WARNING"
            concerns.append("high_distress")
        
        if bp_sys > 160 or bp_sys < 90:
            severity = "WARNING"
            concerns.append("abnormal_blood_pressure")
    
    # Check for CRS (Cytokine Release Syndrome) - CAR-T specific
    if temp > 38.0 and hr > 100:
        concerns.append("possible_CRS")
        if severity == "NORMAL":
            severity = "WARNING"
    
    # Check for neurotoxicity indicators
    if posture_alert and distress > 6:
        concerns.append("possible_neurotoxicity")
        if severity == "NORMAL":
            severity = "WARNING"
    
    # Recommended actions based on severity (CONCISE)
    if severity == "CRITICAL":
        action = ["Call physician immediately", "Activate emergency protocol", "Prepare intervention"]
    elif severity == "WARNING":
        action = ["Bedside patient assessment", "Increase monitoring frequency", "Check lab values"]
    else:
        action = ["Continue standard monitoring"]
    
    # Build reasoning (CONCISE - limit to 150 chars for UI)
    reasoning = f"HR: {hr}bpm, Temp: {temp}°C, SpO2: {spo2}%, Distress: {distress}/10"
    if concerns:
        concern_str = ", ".join(concerns[:3])  # Max 3 concerns
        reasoning += f". {concern_str}"
        if len(concerns) > 3:
            reasoning += f" +{len(concerns)-3} more"
    
    # Truncate reasoning if too long
    if len(reasoning) > 150:
        reasoning = reasoning[:147] + "..."
    
    confidence = 0.85 if concerns else 0.95
    
    return {
        "severity": severity,
        "concerns": concerns,
        "recommended_action": action,
        "reasoning": reasoning,
        "confidence": confidence
    }

def _create_alert_message(patient_id: str, severity: str) -> str:
    """Create alert message"""
    if severity == "CRITICAL":
        return f"🚨 CRITICAL: Patient {patient_id} requires immediate medical attention"
    elif severity == "WARNING":
        return f"⚠️ WARNING: Patient {patient_id} showing concerning vital signs"
    else:
        return f"✅ Patient {patient_id} vitals within normal range"

# ==================== MONITORING PROTOCOL ====================

health_protocol = Protocol(name="HealthMonitoring", version="1.0")

@health_protocol.on_message(model=PatientUpdate)
async def handle_patient_update(ctx: Context, sender: str, msg: PatientUpdate):
    """Receive and analyze patient data"""
    ctx.logger.info(f"📊 Received update for {msg.patient_id}")
    
    # Store patient data
    patients[msg.patient_id] = {
        "vitals": msg.vitals,
        "cv_metrics": msg.cv_metrics,
        "last_update": msg.timestamp,
        "sender": sender
    }
    
    # Analyze health data
    analysis = _analyze_patient(patients[msg.patient_id])
    
    # Create alert
    alert = {
        "alert_id": str(uuid4())[:8],
        "patient_id": msg.patient_id,
        "severity": analysis["severity"],
        "message": _create_alert_message(msg.patient_id, analysis["severity"]),
        "reasoning": analysis["reasoning"],
        "recommended_action": analysis["recommended_action"],
        "timestamp": datetime.utcnow().isoformat(),
        "confidence": analysis["confidence"],
        "concerns": analysis["concerns"]
    }
    
    # Store alert history
    alert_history.append(alert)
    
    # Keep active alerts
    if alert["severity"] in ["CRITICAL", "WARNING"]:
        alerts.append(alert)
        ctx.logger.warning(f"{alert['severity']}: {msg.patient_id} - {', '.join(analysis['concerns'])}")
    else:
        ctx.logger.info(f"✅ {msg.patient_id} stable")
    
    # Limit active alerts to last 20
    if len(alerts) > 20:
        alerts.pop(0)

agent.include(health_protocol, publish_manifest=True)

# ==================== CHAT PROTOCOL ====================

chat_proto = Protocol(spec=chat_protocol_spec)

def create_text_chat(text: str) -> ChatMessage:
    """Create chat message"""
    return ChatMessage(
        timestamp=datetime.utcnow(),
        msg_id=uuid4(),
        content=[TextContent(type="text", text=text)]
    )

@chat_proto.on_message(ChatMessage)
async def handle_chat(ctx: Context, sender: str, msg: ChatMessage):
    """Handle chat queries"""
    ctx.logger.info(f"💬 Chat from {sender[:8]}...")
    
    # Acknowledge
    await ctx.send(sender, ChatAcknowledgement(
        timestamp=datetime.utcnow(),
        acknowledged_msg_id=msg.msg_id
    ))
    
    response_text = ""
    
    for item in msg.content:
        if isinstance(item, StartSessionContent):
            response_text = (
                "👋 Hello! I'm the Haven Health Agent - an AI monitoring system for clinical trial patients. "
                "I analyze vital signs, detect health concerns, and alert medical staff. "
                "Ask me: 'status', 'list patients', 'show alerts', 'patient P-001', or 'help'"
            )
        
        elif isinstance(item, TextContent):
            query = item.text.lower()
            
            # List patients
            if "patient" in query and ("list" in query or "all" in query or "who" in query):
                if patients:
                    response_text = f"👥 Monitoring {len(patients)} patient(s):\n"
                    for pid, data in list(patients.items())[:10]:
                        last_update = data.get("last_update", "unknown")[:19]
                        response_text += f"• {pid} (updated: {last_update})\n"
                else:
                    response_text = "No patients currently monitored. Waiting for data from Haven system."
            
            # System status
            elif "status" in query or "overview" in query:
                critical = sum(1 for a in alerts if a["severity"] == "CRITICAL")
                warning = sum(1 for a in alerts if a["severity"] == "WARNING")
                
                response_text = f"🏥 System Status:\n"
                response_text += f"• Patients: {len(patients)}\n"
                response_text += f"• Active Alerts: {len(alerts)}\n"
                
                if critical > 0:
                    response_text += f"• 🚨 CRITICAL: {critical}\n"
                if warning > 0:
                    response_text += f"• ⚠️ WARNING: {warning}\n"
                
                if not alerts:
                    response_text += "\n✅ All patients stable"
                
                response_text += f"\nTotal Processed: {len(alert_history)} alerts"
            
            # Specific patient
            elif any(char.isdigit() for char in query) and "patient" in query:
                # Try to find patient ID
                patient_id = None
                for pid in patients.keys():
                    if pid.lower() in query:
                        patient_id = pid
                        break
                
                if patient_id and patient_id in patients:
                    data = patients[patient_id]
                    vitals = data.get("vitals", {})
                    cv = data.get("cv_metrics", {})
                    
                    response_text = f"📋 {patient_id} Current Status:\n\n"
                    response_text += f"Vitals:\n"
                    response_text += f"• Heart Rate: {vitals.get('heart_rate', 'N/A')} bpm\n"
                    response_text += f"• Temperature: {vitals.get('temperature', 'N/A')}°C\n"
                    response_text += f"• BP: {vitals.get('blood_pressure', 'N/A')}\n"
                    response_text += f"• SpO2: {vitals.get('spo2', 'N/A')}%\n"
                    response_text += f"\nCV Metrics:\n"
                    response_text += f"• Distress: {cv.get('distress_score', 'N/A')}/10\n"
                    response_text += f"• Movement: {cv.get('movement_score', 'N/A')}/10\n"
                    
                    # Recent alert
                    patient_alerts = [a for a in alerts if a["patient_id"] == patient_id]
                    if patient_alerts:
                        latest = patient_alerts[-1]
                        response_text += f"\n⚠️ Latest Alert: {latest['severity']}\n"
                        response_text += f"Action: {latest['recommended_action']}"
                    else:
                        response_text += "\n✅ No active alerts"
                else:
                    response_text = "Patient not found. Try 'list patients' to see monitored patients."
            
            # Show alerts
            elif "alert" in query or "warning" in query or "critical" in query:
                if alerts:
                    response_text = f"🚨 Active Alerts ({len(alerts)}):\n\n"
                    for alert in alerts[-5:]:
                        response_text += f"• {alert['patient_id']}: {alert['severity']}\n"
                        response_text += f"  {alert['reasoning'][:60]}...\n"
                else:
                    response_text = "✅ No active alerts. All patients stable."
            
            # Medical symptom analysis (ACTION - search and diagnose)
            elif any(word in query for word in ["pain", "symptom", "issue", "problem", "concern"]):
                # Extract symptom information
                symptom_keywords = {
                    "chest": ["cardiac event", "myocardial infarction", "angina", "pulmonary embolism"],
                    "head": ["neurotoxicity", "ICANS", "headache", "confusion"],
                    "fever": ["infection", "CRS", "cytokine release syndrome"],
                    "breathing": ["respiratory distress", "pneumonia", "pulmonary edema"],
                    "heart": ["arrhythmia", "tachycardia", "cardiac toxicity"]
                }
                
                # Search for matching conditions
                detected_symptoms = []
                possible_causes = []
                
                for keyword, causes in symptom_keywords.items():
                    if keyword in query:
                        detected_symptoms.append(keyword)
                        possible_causes.extend(causes)
                
                if detected_symptoms:
                    # ACTION: Generate diagnostic report
                    response_text = f"🔍 DIAGNOSTIC SEARCH RESULTS\n\n"
                    response_text += f"Symptom: {', '.join(detected_symptoms)}\n\n"
                    response_text += f"Possible Causes (CAR-T context):\n"
                    for i, cause in enumerate(possible_causes[:4], 1):
                        response_text += f"{i}. {cause}\n"
                    
                    response_text += f"\n📋 RECOMMENDED ACTIONS:\n"
                    if "chest" in detected_symptoms or "heart" in detected_symptoms:
                        response_text += "• Immediate ECG\n"
                        response_text += "• Check troponin levels\n"
                        response_text += "• Assess for cardiac toxicity\n"
                        response_text += "• Monitor continuously\n"
                    elif "head" in detected_symptoms:
                        response_text += "• Neurological exam\n"
                        response_text += "• ICANS assessment\n"
                        response_text += "• CT scan if indicated\n"
                        response_text += "• Consider steroids\n"
                    elif "fever" in detected_symptoms:
                        response_text += "• Check CRS grading\n"
                        response_text += "• Blood cultures\n"
                        response_text += "• Consider tocilizumab\n"
                        response_text += "• Monitor vitals closely\n"
                    else:
                        response_text += "• Clinical assessment needed\n"
                        response_text += "• Review patient history\n"
                        response_text += "• Monitor for progression\n"
                    
                    response_text += f"\n⚠️ For monitored patients, check: 'patient P-001' for specific vitals"
                else:
                    response_text = (
                        "I can help analyze symptoms for CAR-T patients. "
                        "Try: 'patient has chest pain', 'fever symptoms', 'breathing issues'. "
                        "For emergencies, call 911 immediately."
                    )
            
            # Protocol recommendation - ACTION: recommend treatment protocol
            elif "protocol" in query or "recommend" in query or "suggest" in query or "treatment" in query:
                if patients:
                    # ACTION: Analyze all patients and recommend protocols
                    response_text = "🏥 PROTOCOL RECOMMENDATIONS:\n\n"
                    
                    has_critical = any(a["severity"] == "CRITICAL" for a in alerts)
                    has_fever = any("fever" in str(a.get("concerns", [])) for a in alerts)
                    has_crs = any("CRS" in str(a.get("concerns", [])) for a in alerts)
                    has_neuro = any("neurotoxicity" in str(a.get("concerns", [])) for a in alerts)
                    
                    if has_critical:
                        response_text += "🚨 CRITICAL PROTOCOL:\n"
                        response_text += "1. Activate rapid response team\n"
                        response_text += "2. Continuous monitoring required\n"
                        response_text += "3. Prepare ICU transfer\n"
                        response_text += "4. Notify attending physician\n\n"
                    
                    if has_crs:
                        response_text += "💊 CRS MANAGEMENT:\n"
                        response_text += "• Grade assessment needed\n"
                        response_text += "• Consider tocilizumab (IL-6 inhibitor)\n"
                        response_text += "• Supportive care (fluids, oxygen)\n"
                        response_text += "• Monitor for progression\n\n"
                    
                    if has_neuro:
                        response_text += "🧠 NEUROTOXICITY PROTOCOL:\n"
                        response_text += "• ICANS grading required\n"
                        response_text += "• Neurological exams q4h\n"
                        response_text += "• Consider steroids (dexamethasone)\n"
                        response_text += "• Seizure precautions\n\n"
                    
                    if has_fever and not has_crs:
                        response_text += "🌡️ FEVER WORKUP:\n"
                        response_text += "• Blood cultures x2\n"
                        response_text += "• Broad-spectrum antibiotics\n"
                        response_text += "• Rule out infection vs CRS\n"
                        response_text += "• Monitor inflammatory markers\n\n"
                    
                    if not alerts:
                        response_text += "✅ ROUTINE MONITORING:\n"
                        response_text += "• Continue standard CAR-T protocol\n"
                        response_text += "• Vital signs q4h\n"
                        response_text += "• Daily labs (CBC, CMP, CRP)\n"
                        response_text += "• Patient education on symptoms\n"
                else:
                    response_text = "No patients monitored yet. Start monitoring to get protocol recommendations."
            
            # Correlation search - find patients with similar symptoms
            elif "similar" in query or "correlate" in query or "pattern" in query:
                if alert_history:
                    # ACTION: Search for patterns across patients
                    concern_counts = {}
                    for alert in alert_history:
                        for concern in alert.get("concerns", []):
                            concern_counts[concern] = concern_counts.get(concern, 0) + 1
                    
                    if concern_counts:
                        response_text = "🔍 PATTERN ANALYSIS ACROSS PATIENTS:\n\n"
                        sorted_concerns = sorted(concern_counts.items(), key=lambda x: x[1], reverse=True)
                        
                        response_text += "Most Common Concerns:\n"
                        for concern, count in sorted_concerns[:5]:
                            response_text += f"• {concern}: {count} occurrence(s)\n"
                        
                        # Identify potential clusters
                        if sorted_concerns[0][1] > 2:
                            response_text += f"\n⚠️ ALERT: '{sorted_concerns[0][0]}' detected in multiple patients\n"
                            response_text += "Recommended: Review CAR-T protocol for common adverse events\n"
                    else:
                        response_text = "No patterns detected yet. Need more patient data."
                else:
                    response_text = "No historical data available for pattern analysis."
            
            # Help
            elif "help" in query or "what can" in query:
                response_text = (
                    "🤖 Haven Health Agent - I DO:\n\n"
                    "📊 MONITORING:\n"
                    "• 'status' - System overview\n"
                    "• 'list patients' - All monitored patients\n"
                    "• 'patient P-001' - Specific patient details\n\n"
                    "🚨 ALERTS:\n"
                    "• 'show alerts' - Active health alerts\n"
                    "• 'critical' - Emergency situations\n\n"
                    "🔍 ACTIONS I TAKE:\n"
                    "• 'patient has chest pain' - Diagnose & recommend actions\n"
                    "• 'fever symptoms' - Search causes & protocols\n"
                    "• 'find patterns' - Correlate across patients\n\n"
                    "I don't just chat - I analyze, search, and take action!"
                )
            
            # Default
            else:
                if patients:
                    response_text = f"🏥 Monitoring {len(patients)} patient(s), {len(alerts)} active alert(s). Try: 'status', 'list patients', 'show alerts', 'help'"
                else:
                    response_text = "🏥 Health Agent active. No patients currently monitored. Try: 'help' for commands"
        
        elif isinstance(item, EndSessionContent):
            response_text = "Session ended. I'll continue monitoring patients. Stay safe! 👋"
    
    if response_text:
        await ctx.send(sender, create_text_chat(response_text))

@chat_proto.on_message(ChatAcknowledgement)
async def handle_ack(ctx: Context, sender: str, msg: ChatAcknowledgement):
    """Handle acknowledgements"""
    pass

agent.include(chat_proto, publish_manifest=True)

# ==================== PERIODIC MONITORING ====================

@agent.on_interval(period=30.0)
async def periodic_check(ctx: Context):
    """Periodic status check"""
    if patients:
        critical = sum(1 for a in alerts if a["severity"] == "CRITICAL")
        warning = sum(1 for a in alerts if a["severity"] == "WARNING")
        if critical > 0:
            ctx.logger.warning(f"🚨 {critical} CRITICAL, {warning} WARNING alerts")
        else:
            ctx.logger.info(f"✅ {len(patients)} patients monitored, {len(alerts)} alerts")
    else:
        ctx.logger.info("⏳ No patient data yet")

@agent.on_event("startup")
async def startup(ctx: Context):
    """Startup logging"""
    ctx.logger.info("=" * 50)
    ctx.logger.info("🏥 HAVEN HEALTH AGENT - AGENTVERSE")
    ctx.logger.info("=" * 50)
    ctx.logger.info(f"📍 Address: {agent.address}")
    ctx.logger.info(f"📬 Mailbox: {'Enabled' if MAILBOX_KEY else 'Local mode'}")
    ctx.logger.info(f"🔗 Protocols: HealthMonitoring v1.0, Chat v0.3.0")
    ctx.logger.info(f"💬 Chat: ASI:One compatible")
    ctx.logger.info("=" * 50)
    ctx.logger.info("🟢 Agent ready - monitoring for patient data")

# ==================== MAIN ====================

if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("🏥 HAVEN HEALTH AGENT")
    print("=" * 50)
    print(f"📍 Address: {agent.address}")
    print(f"📬 Mailbox: {'Configured' if MAILBOX_KEY else 'Not configured'}")
    print("\nFeatures:")
    print("  • Real-time vital monitoring")
    print("  • AI health assessment")
    print("  • Automatic severity classification")
    print("  • ASI:One chat interface")
    print("=" * 50)
    print("🟢 Starting agent...\n")
    agent.run()

